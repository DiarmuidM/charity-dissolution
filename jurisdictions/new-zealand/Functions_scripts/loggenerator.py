## Python script to generate log files for ew data download

# Tom Wallace
# Created: 09 April 2019
# Last edited: captured in Github file history

#######Import packages#######
from downloaddate_function import downloaddate, longtime
import csv
import os

#######Functions#######

def gen_log(starttime=longtime(), finishtime=longtime(), scriptname='NULL', scriptpath='NULL', scriptdesc='NULL', #These default vlaues allow the log to always be created even if not passed the correct info
	processedfiles='<<< This script did not have any input files >>>', 
	writtenfiles='<<< This script did not produce any files >>>', settings_toggles='NULL'): 
	
	if scriptname=='NULL': #If the log isn't passed a script name, set error text and print.
		statustext = '>>> Log generator was not passed appropriate file name. <<<\n'
		print('>>> Log generator was not passed appropriate file name. <<<')
	else:
		statustext = 'Script completed.\n'
	logtime = longtime() # Capture when the log was created
	deltatime = finishtime-starttime # Calculate how long the script took (not the log)
	scriptpath = scriptpath + '\\'
	logpath = scriptpath + 'Logs\\' # Set where the log is saved, in this case it is in a folder called 'Logs' where host script it located, this could be swithced to where the data is saved by changing scriptpath to savpath
	if not os.path.exists(logpath): # If the log path doesn't exist, makie it
		os.makedirs(logpath)
	logfile = scriptname + '_' + 'log.txt' # Concatinate the name of the logfile
	logpath_file = logpath + logfile # where to save the log
	logscriptname = os.path.basename(__file__) # Get the name of the logfile
	with open(logpath_file, 'w') as f: # Open a text writer called f
		
		#Header
		f.write('<Start of log>')
		f.write('\n\n')
		f.write('***Status***\n')
		f.write(statustext)
		f.write('Script name: ')
		f.write(scriptname)
		f.write('\n')
		f.write('Script located in: ')
		f.write(scriptpath)
		f.write('\n')
		f.write('Description of script purpose: ')
		f.write(scriptdesc)
		f.write('\n')
		f.write('Settings or toggles in script: ')
		f.write(settings_toggles)		
		f.write('\n\n')

		#Times
		f.write('***Time stamping***\n')
		f.write('Log generated: ')
		f.write(logtime.strftime("%Y-%m-%d %H:%M:%S"))
		f.write('\n')
		f.write('Script start time: ')
		f.write(starttime.strftime("%Y-%m-%d %H:%M:%S"))
		f.write('\n')
		f.write('Script end time: ')
		f.write(finishtime.strftime("%Y-%m-%d %H:%M:%S"))
		f.write('\n')
		f.write('Script took: ')
		f.write(str(deltatime))
		f.write('\n\n')

		#Input files
		f.write('***Input/process operations***\n')
		f.write('The following files were processed (input data): \n')
		f.write(str(processedfiles))
		f.write('\n\n')

		#Files saved
		f.write('***Output/Write operations***\n')
		f.write('The following files were written (output data):\n')
		f.write(str(writtenfiles))
		f.write('\n\n')

		#Log informaiton
		f.write('***Log information***\n')
		f.write('Log saved in directory: ')
		f.write(logpath)
		f.write('\n')
		f.write('Log saved with name: ')
		f.write(logfile)
		f.write('\n')
		f.write('Log generated by file named: ')
		f.write(logscriptname)
		f.write('\n')
		f.write('Log generator file located in: ')
		f.write(os.path.dirname(os.path.realpath(__file__))) # This is the absolute directory the logfile generator (this script) is located in
		f.write('\n\n')

		#Footer
		f.write('<End of log>')
	f.close()

	print('Log file named ' + "'" + scriptname + "_log.txt'" + ' saved in ' + "'" + logpath + "'") # Print to user

def main(): # this method allows the log generator to be run standalone with faux inputs for testing
	gen_log()

if __name__ == '__main__': # If the script is run itself just call the main method - like in Java!
	main()
